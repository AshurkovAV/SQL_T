ALTER PROCEDURE [dbo].[emk4_GetReferralMse]  
--@AF_CURRENT_FILIAL INT, 
@AF_CURRENT_PATIENT INT,
@AF_CURRENT_MOTCONSU INT
AS
BEGIN

declare @effectiveTime_value datetime = (select DATE_CONSULTATION from MOTCONSU where MOTCONSU_ID = (select SLUCHAI_ZABOL from DATA_W438_MSE_NAPRAV where MOTCONSU_ID = @AF_CURRENT_MOTCONSU))
  		 ---------------------------------------------------------------------------------------------------------------
		 ------------------ ClinicalDocument ---------------------------------------------------------------------------
		 ---------------------------------------------------------------------------------------------------------------
SELECT
(SELECT IEMK_OID FROM FM_ORG WHERE FM_ORG_ID = 1) as [MO_OID],
motconsu_id as [MOTCONSU_ID],
CONVERT(VARCHAR(MAX), REPLACE((convert(varchar(10),ISNULL(mse.DATE_PROTOKOLA_VK, @effectiveTime_value),112) + CONVERT(varchar(5), convert(time, @effectiveTime_value))), ':','') + '+0300') AS [effectiveTime_value],
CONVERT(varchar(MAX), mse.KRN_GUID) AS [PATIENTS_ID],
CONVERT(varchar(MAX), mse.SYS_SNILS) AS [PATIENTS_SNILS],
CONVERT(VARCHAR(MAX),CASE WHEN mse.VID_DOKUMENTA = 21 THEN '1' WHEN mse.VID_DOKUMENTA = 10 THEN '6' ELSE '1' END) AS [PATIENTS_DOC_ID],
CONVERT(VARCHAR(MAX),CASE WHEN mse.VID_DOKUMENTA = 21 THEN 'Паспорт гражданина Российской Федерации' WHEN mse.VID_DOKUMENTA = 10 THEN 'Свидетельство о рождении' ELSE 'Паспорт гражданина Российской Федерации' END) AS [PATIENTS_DOC_NAME],
CONVERT(VARCHAR(MAX),REPLACE(ISNULL(mse.SERIQ_DOKUMENTA, ''), ' ', '') )AS [PATIENTS_DOC_SERIYA],
CONVERT(VARCHAR(MAX),REPLACE(ISNULL(mse.PASPORT_N,''), ' ', '')) AS [PATIENTS_DOC_NUMBER],
CASE WHEN mse.VID_DOKUMENTA = 10 THEN CONVERT(varchar(250), mse.KEM_V_DAN) WHEN mse.VID_DOKUMENTA = 21 THEN CONVERT(varchar(250), mse.KEM_V_DAN)  + '. Код подразделения: ' + ISNULL(mse.kod_podrazdeleniya, '') END AS [PATIENTS_DOC_KEM_VIDAN],
CONVERT(VARCHAR(MAX),ISNULL(mse.kod_podrazdeleniya, '')) AS [PATIENTS_DOC_KOD_PODRAZDELENIYA],
CONVERT(VARCHAR(10), mse.KOGDA_V_DAN, 112) AS [PATIENTS_DOC_KOGDA_VIDAN],
CONVERT(VARCHAR(MAX),mse.NOM) AS [NOM],
CONVERT(VARCHAR(MAX),mse.PRENOM )AS [PATIENTS_PRENOM],
CONVERT(VARCHAR(MAX),mse.PATRONYME )AS [PATIENTS_PATRONYME],
CONVERT(VARCHAR(MAX),CASE WHEN mse.pol = N'мужской' THEN '1' WHEN mse.pol = N'женский' THEN '2' ELSE '3' END) AS [PATIENTS_SEX_CODE],
CONVERT(VARCHAR(MAX),mse.pol) AS [PATIENTS_SEX_NAME],
CONVERT(VARCHAR(10), mse.ne_le, 112) AS [PATIENTS_BIRTH_DATE],
------------------------------------------------------------------------------------
-- [0..1] Адрес постоянной регистрации пациента
  
  ISNULL(mse.KOD_TERRITORII, '') AS 'H_KOD_TERRITORII',
  --   [1..1] район -->
  --'ЦФО' AS 'CD/recordTarget/patientRole/addr[1]/county',	-- нужно написать определение округов на основе кода региона		UPD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
  --   [1..1] наименование населённого пункта -->
  ISNULL(mse.NASELENN_J_PUNKT, '') AS 'H_NASELENNJ_PUNKT',
  --   [1..1] почтовый индекс -
  ISNULL(mse.INDEKS_STREET, '') AS 'H_INDEKS_STREET',
  --   [1..1] адрес текстом -->
  'Р ЦФО, ' + ISNULL(mse.INDEKS_STREET, '') + ', ' + ISNULL(mse.NASELENN_J_PUNKT, '') + ', ' + ISNULL(mse.ULICA, '') + ', д. ' + ISNULL(mse.DOM, '') + ', корп. ' + isnull(mse.KORPUS, '') + ', стр. ' + ISNULL(mse.STROENIE, '') + ', кв. ' + ISNULL(mse.KVARTIRA, '') AS 'H_StreetAddressLine',
  --   [1..1] дом -->
  'д. ' + ISNULL(mse.DOM, '') + ', корп. ' + isnull(mse.KORPUS, '') + ', стр. ' + ISNULL(mse.STROENIE, '')  AS 'H_HouseNumber',
  --   [1..1] улица -->
  ISNULL(mse.ULICA, '') AS 'H_StreetName',
  --   [1..1] квартира -->
  ISNULL(mse.KVARTIRA, '') AS 'H_unitID',
 
 -- [0..1] Адрес фактического места жительства пациента -->
 
  ISNULL(mse.REG_TERRITORY, '') AS 'HP_REG_TERRITORY',
  --   [1..1] район -->
 -- 'ЦФО' AS 'CD/recordTarget/patientRole/addr[2]/county',	-- нужно написать определение округов на основе кода региона		UPD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
  --   [1..1] наименование населённого пункта -->
  ISNULL(mse.REG_SETTLEMENT_TEXT, '') AS 'HP_NASELENNJ_PUNKT',
  --   [1..1] почтовый индекс -
  ISNULL(mse.REG_INDEKS_STREET, '') AS 'HP_REG_INDEKS_STREET',
  --   [1..1] адрес текстом -->
  'Ж ЦФО, ' + ISNULL(mse.REG_INDEKS_STREET, '') + ', ' + ISNULL(mse.REG_SETTLEMENT_TEXT, '') + ', ' + ISNULL(mse.REG_STREET_TEXT, '') + ', д. ' + ISNULL(mse.REG_HOUSE, '') + ', корп. ' + isnull(mse.REG_HOUSING, '') + ', стр. ' + ISNULL(mse.REG_BUILDING, '') + ', кв. ' + ISNULL(mse.REG_FLAT, '') AS 'HP_StreetAddressLine',
  --   [1..1] дом -->
  'д. ' + ISNULL(mse.REG_HOUSE, '') + ', корп. ' + isnull(mse.REG_HOUSING, '') + ', стр. ' + ISNULL(mse.REG_BUILDING, '')  AS 'HP_HouseNumber',
  --   [1..1] улица -->
  ISNULL(mse.REG_STREET_TEXT, '')  AS 'HP_StreetName',
  --   [1..1] квартира -->
  ISNULL(mse.REG_FLAT, '') AS 'HP_unitID',
  --------------------------------------------------------------------------
  --<!-- [0..1] Кодирование инвалидности -->
		 --                           <!-- R [1..1] Инвалидность -->
CASE WHEN ISNULL(mse.INVALID, '') = 0 THEN '1' WHEN ISNULL(mse.INVALID, '') = 1 THEN '2' WHEN ISNULL(mse.INVALID, '') = 2 THEN '3' WHEN ISNULL(mse.INVALID, '') = 3 THEN '4' END AS 'GROUP_INVALID_CODE',
CASE WHEN ISNULL(mse.INVALID, '') = 0 THEN '1 группа' WHEN ISNULL(mse.INVALID, '') = 1 THEN '2 группа' WHEN ISNULL(mse.INVALID, '') = 2 THEN '3 группа' WHEN ISNULL(mse.INVALID, '') = 3 THEN 'ребенок-инвалид' END  AS 'GROUP_INVALID_NAME',
 --                               <!-- [1..1] Дата\время, до которой установлена инвалидность -->
CONVERT(varchar, ISNULL(mse.OKONCH_DEISTVIYA, ''), 112) AS 'DATA_UTRATI',
--										<!-- R [1..1] Срок, на который установлена степень утраты профессиональной трудоспособности -->
CASE WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 0 THEN '1' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 1 THEN '2' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 2 THEN '3' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 3 THEN '4' END AS 'SROK_UTRATY_CODE',
CASE WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 0 THEN 'на один год' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 1 THEN 'на два года' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 2 THEN 'на пять лет' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 3 THEN 'до 14 лет'  WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 4 THEN 'до 18 лет' WHEN ISNULL(mse.POVTOR_SROK_UTRATI_1, '') = 5 THEN 'бессрочно' END  AS 'SROK_UTRATY_NAME',
--  <!-- R [1..1] Срок, на который установлена степень утраты профессиональной трудоспособности -->
CASE WHEN ISNULL(mse.PERIOD_INVALID, '') = 0 THEN 1 WHEN ISNULL(mse.PERIOD_INVALID, '') = 1 THEN 2 WHEN ISNULL(mse.PERIOD_INVALID, '') = 2 THEN 3 WHEN ISNULL(mse.PERIOD_INVALID, '') = 3 THEN 4 END AS 'PERIOD_NAHODITSYA_NA_INV' ,
CASE WHEN ISNULL(mse.PERIOD_INVALID, '') = 0 THEN 'Один год' WHEN ISNULL(mse.PERIOD_INVALID, '') = 1 THEN 'Два года' WHEN ISNULL(mse.PERIOD_INVALID, '') = 2 THEN 'Три года' WHEN ISNULL(mse.PERIOD_INVALID, '') = 3 THEN 'Четыре и более лет' END AS 'PERIOD_NAHODITSYA_NA_INV_NAME',
 --                           <!-- [0..1] кодирование ... Причина инвалидности -->
CONVERT(varchar, ISNULL(mse.PRICHINA_INVALID, '')) AS 'MSE_MISSION_INVALID', 
CONVERT(nvarchar, ISNULL(mse.FORMULIROVKA_PRICHINY, '')) AS 'MSE_MISSION_DisplayName',

  ---------------------------------------------------------------------------
--<!-- [0..1] Законный (уполномоченный) представитель -->
-- <!-- [0..1] СНИЛС представителя -->
 ISNULL(mse.DATA_FOR_LEGAL_REPRESENT_SNILS, '') AS 'GUARD_SNILS',
    --						<!--   [1..1] Серия документа -->
 REPLACE(ISNULL(mse.DATA_FOR_LEGAL_REPRESENT_SERIQ_, ''), ' ', '') AS 'GUARD_DOC_SERIES',
    --						<!-- R [1..1] Номер документа -->
 REPLACE(ISNULL(mse.NOMER_DOKUMENTA, ''), ' ', '')  AS 'GUARD_DOC_NOMER',
     --						<!--   [1..1] Кем выдан документ -->
 ISNULL(mse.KEM_V_DAN, '') + '. Код подразделения: ' + ISNULL(mse.KOD_PODRAZDELENIYA, '') AS 'GUARD_DOC_KEM_VYDAN',
   --						<!--   [1..1] Кем выдан документ, код подразделения -->
 ISNULL(mse.KOD_PODRAZDELENIYA, '')  AS 'GUARD_KOD_PODRAZDELENIYA',
  --                          <!-- R [1..1] Дата выдачи документа -->
 CONVERT(VARCHAR(10), mse.KOGDA_V_DAN, 112) AS 'GUARD_DOC_DATE',
  --					</f88:IdentityDoc>
  --					<!-- [0..1] ЛОКАЛЬНЫЙ ЭЛЕМЕНТ: Документ, удостоверяющий полномочия представителя, серия, номер, кем выдан. -->
  --					<f88:AuthorityDoc>
  --						<!-- R [1..1] Тип документа -->
 CASE WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 0 THEN '1' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 1 THEN '2' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 2 THEN '3' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 3 THEN '4' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 4 THEN '5' END AS 'PRED_DOC_CODE',
 CASE WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 0 THEN 'Свидетельство о рождении' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 1 THEN 'Решение о назначении лица опекуном' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 2 THEN 'Решение о назначении лица попечителем' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 3 THEN 'Доверенность' WHEN ISNULL(mse.DOKUM_PREDSTAV_, '') = 4 THEN 'Свидетельство об усыновлении (удочерении)' END AS 'PRED_DOC_NAME',
	--						<!--   [1..1] Серия документа -->
 CONVERT(varchar, (ISNULL(convert(varchar(20), mse.SERIYA_DOC_PODTV), ''))) AS 'GUARD_ADD_SERYA_DOCUMENTA',
    --						<!-- R [1..1] Номер документа -->
 ISNULL(mse.PASPORT, '') AS 'GUARD_ADD_NOMER_DOCUMENTA',
    --						<!--   [1..1] Кем выдан документ -->
 ISNULL(mse.VYDAN_KEM_KOGDA, '')  AS 'GUARD_ADD_KEM_VIDAN',
    --						<!-- R [1..1] Дата выдачи документа -->
 CONVERT(varchar(10), ISNULL(mse.KOGDA_VIDAN_DOC_PODTV, ''), 112) AS GUARD_ADD_KOGDA_VIDAN,
 --                           <!-- R [1..1] Фамилия -->
  mse.FAMILIYA AS 'GUARD_FAMILIYA',
  --                            <!-- R [1..1] Имя -->
  mse.IMYA AS 'GUARD_IMYA',
  --                            <!-- [1..1] Отчество -->
  mse.OTCHESTVO AS 'GUARD_OTCHESTVO',
  

---------------------------------------------------------

CONVERT(VARCHAR(MAX),(SELECT ORGN FROM FM_ORG WHERE FM_ORG_ID = 1)) AS [ORG_OGRN],
CONVERT(VARCHAR(MAX),(SELECT LABEL FROM FM_ORG WHERE FM_ORG_ID = 1) )AS [ORG_NAME],
CONVERT(VARCHAR(MAX),(SELECT LN_ADDRESS FROM FM_ORG WHERE FM_ORG_ID = 1)) AS [ORG_ADDRESS],
CONVERT(VARCHAR(MAX),REPLACE((convert(varchar(10),mse.KRN_MODIFY_DATE,112) + convert(varchar(5), convert(time, mse.KRN_MODIFY_DATE))), ':','') + '+0300' )AS [AUTHOR_DATE_SIGN],
CONVERT(varchar(MAX), mse.MEDECINS_CREATOR_ID) AS [AUTHOR_ID],
CONVERT(varchar(MAX), mse.CODE_NSI_DOLZGNOST) AS [AUTHOR_DOLZGNOST_CODE],
CONVERT(VARCHAR(MAX),ISNULL(mse.DOLZGNOST_MED_PERSONALA, '')) AS [AUTHOR_DOLZGNOST_NAME],
CONVERT(VARCHAR(MAX),ltrim(rtrim(mse.MEDECINS_CREATOR_NOM))) AS [AUTHOR_NOM],
CONVERT(VARCHAR(MAX),CASE WHEN LEN (ltrim(rtrim(substring(mse.MEDECINS_CREATOR_PRENOM, 0, charindex(' ', mse.MEDECINS_CREATOR_PRENOM))))) = 0 THEN mse.MEDECINS_CREATOR_PRENOM ELSE (ltrim(rtrim(substring(mse.MEDECINS_CREATOR_PRENOM, 0, charindex(' ', mse.MEDECINS_CREATOR_PRENOM))))) END )AS [AUTHOR_PRENOM],
CONVERT(VARCHAR(MAX),ltrim(rtrim(substring(mse.MEDECINS_CREATOR_PRENOM, charindex(' ', mse.MEDECINS_CREATOR_PRENOM) +1, (len(mse.MEDECINS_CREATOR_PRENOM) + charindex(' ', mse.MEDECINS_CREATOR_PRENOM))))) )AS [AUTHOR_PATRONYME],
CONVERT(VARCHAR(MAX),mse.PREDSEDATEL_VK_ID )AS [SIGNED_DOCTOR_ID],
CONVERT(VARCHAR(MAX),ltrim(rtrim(mse.PREDSEDATEL_NOM))) AS [SIGNED_DOCTOR_NOM],
CONVERT(VARCHAR(MAX),CASE WHEN LEN (ltrim(rtrim(substring(mse.PREDSEDATEL_PRENOM, 0, charindex(' ', mse.PREDSEDATEL_PRENOM))))) = 0 THEN mse.PREDSEDATEL_PRENOM ELSE (ltrim(rtrim(substring(mse.PREDSEDATEL_PRENOM, 0, charindex(' ', mse.PREDSEDATEL_PRENOM))))) END) AS [SIGNED_DOCTOR_PRENOM],
CONVERT(VARCHAR(MAX),ltrim(rtrim(substring(mse.PREDSEDATEL_PRENOM, charindex(' ', mse.PREDSEDATEL_PRENOM) +1, (len(mse.PREDSEDATEL_PRENOM) + charindex(' ', mse.PREDSEDATEL_PRENOM)))))) AS [SIGNED_DOCTOR_PATRONYME],
CONVERT(VARCHAR(MAX),CASE WHEN mse.GRAZDANIN_NAHODITSYA = 0 THEN '7' WHEN mse.GRAZDANIN_NAHODITSYA = 1 THEN '10' WHEN mse.GRAZDANIN_NAHODITSYA = 2 THEN '11' WHEN mse.GRAZDANIN_NAHODITSYA = 3 THEN '9' WHEN mse.GRAZDANIN_NAHODITSYA = 4 THEN '2' END) AS [PATIENTS_SITUATED_CODE],
CONVERT(VARCHAR(MAX),CASE WHEN mse.GRAZDANIN_NAHODITSYA = 0 THEN 'Стационар' WHEN mse.GRAZDANIN_NAHODITSYA = 1 THEN 'Организация социального обслуживания, оказывающая социальные услуги в стационарной форме социального обслуживания' WHEN mse.GRAZDANIN_NAHODITSYA = 2 THEN 'Исправительное учреждение' WHEN mse.GRAZDANIN_NAHODITSYA = 3 THEN 'Иные медицинские организации' WHEN mse.GRAZDANIN_NAHODITSYA = 4 THEN 'На дому' END) AS [PATIENTS_SITUATED_NAME],
CONVERT(VARCHAR(MAX),CASE WHEN mse.PERV_POVTORN = 0 THEN 'Первичный' WHEN mse.PERV_POVTORN = 1 THEN 'Повторный' END) AS [DIRECTION_TYPE],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.MISSION, '') = 14 THEN (ISNULL(mse.NAIMENOVANIE, '') + ' ' + ISNULL(mse.ANOTHER_MISSION, '')) ELSE ISNULL(mse.NAIMENOVANIE, '') END) AS [DIRECTION_TARGET],
CONVERT(VARCHAR(MAX),'№ ' + CONVERT(VARCHAR, ISNULL(mse.nomer_protokola_vk, '')) + ' от ' + CONVERT(varchar(10), mse.DATE_PROTOKOLA_VK, 104) + ' г.') AS  [DIRECTION_NUM_DATE],
convert(varchar(10), mse.DATE_PROTOKOLA_VK, 104) +' г.' AS [DIRECTION_DATE],
CONVERT(VARCHAR(MAX),CASE WHEN mse.GRAGDANSTVO = 0 THEN 'Гражданин Российской Федерации' WHEN mse.GRAGDANSTVO = 1 THEN 'Гражданин Российской Федерации и иностранного государства (двойное гражданство)' WHEN mse.GRAGDANSTVO = 2 THEN 'Иностранный гражданин' WHEN mse.GRAGDANSTVO = 3 THEN 'Лицо без гражданства' END) AS [PATIENTS_GRAZGDANSTVO],
CONVERT(VARCHAR(MAX),CASE WHEN mse.VOIN_OBYAZ = 0 THEN 'Гражданин, состоящий на воинском учёте' WHEN mse.VOIN_OBYAZ = 1 THEN 'Гражданин, не состоящий на воинском учёте, но обязанный состоять на воинском учёте' WHEN mse.VOIN_OBYAZ = 2 THEN 'Гражданин, поступающий на воинский учёт' WHEN mse.VOIN_OBYAZ = 3 THEN 'Гражданин, не состоящий на воинском учёте' END) AS [PATIENTS_VOIN_OBYAZ],
CONVERT(VARCHAR(MAX),ISNULL(convert(varchar, mse.MISSION), '')) AS [DIRECTION_TARGET_CODE],
CASE WHEN mse.PERV_POVTORN=0 THEN 1 WHEN mse.PERV_POVTORN=1 THEN 2 END AS [DIRECTION_TYPE_CODE],
CONVERT(VARCHAR(MAX),REPLACE((convert(varchar(10), mse.DATE_PROTOKOLA_VK,112) + convert(varchar(5), convert(time, mse.DATE_PROTOKOLA_VK))), ':','') + '+0300' )AS [DIRECTION_DATETIME],
CONVERT(VARCHAR(MAX), ISNULL(mse.nomer_protokola_vk, '')) AS [DIRECTION_NUMBER],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.PALLIAT_MED_POM, '') = 0 THEN 'false' WHEN ISNULL(mse.PALLIAT_MED_POM, '') = 1 THEN 'true' END ) AS [DIRECTION_PALLIAT_HELP],
CONVERT(VARCHAR(MAX),CASE WHEN mse.GRAGDANSTVO = 0 THEN '1' WHEN mse.GRAGDANSTVO = 1 THEN '2' WHEN mse.GRAGDANSTVO = 2 THEN '3' WHEN mse.GRAGDANSTVO = 3 THEN '4' END) AS [PATIENTS_GRAZGDANSTVO_CODE],
CONVERT(VARCHAR(MAX),CASE WHEN mse.VOIN_OBYAZ = 0 THEN '1' WHEN mse.VOIN_OBYAZ = 1 THEN '3' WHEN mse.VOIN_OBYAZ = 2 THEN '2' WHEN mse.VOIN_OBYAZ = 3 THEN '4' END) AS [PATIENTS_VOIN_OBYAZ_CODE],
replace(CONVERT(VARCHAR(MAX),ISNULL(mse.PROFESSIYA, 'нет данных')), '>', 'больше') AS [PATIENTS_WORK],
CONVERT(VARCHAR(MAX),ISNULL( (ISNULL(mse.NAIMENOVAN_ADRES_OBR_ORG, ' ') + ' ' + ISNULL(mse.KURS_KLASS, ' ') + ' ' + ISNULL(mse.OBUCH_SPECIALNOST_PROFESSIYA, ' ')) , 'нет данных')) AS [PATIENTS_LEARNING],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.NABLUDAETSYA, '') = '' THEN 'нет данных' ELSE 'c ' + CONVERT(nvarchar, ISNULL(mse.NABLUDAETSYA, ''), 104) + ' г.' END) AS [PATIENTS_ANAM_DATE_FROM],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.ANAMNEZ_ZABOL, '') = '' THEN 'нет данных' ELSE REPLACE(REPLACE(CONVERT(nvarchar(max), ISNULL(mse.ANAMNEZ_ZABOL, '')), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_ANAM_ZABOL],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.ANAMNEZ_ZHIZNI, '') = '' THEN 'нет данных' ELSE REPLACE(REPLACE(CONVERT(nvarchar(max), ISNULL(mse.ANAMNEZ_ZHIZNI, '')), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_ANAM_ZGIZN],
CONVERT(VARCHAR(MAX), ISNULL(mse.VES,'')) AS [PATIENTS_VITAL_VES],
CONVERT(VARCHAR(MAX), ISNULL(mse.ROST,'')) AS  [PATIENTS_VITAL_ROST],
CONVERT(VARCHAR(MAX), ISNULL(mse.INDEX_MT,'')) AS [PATIENTS_VITAL_IMT],
CONVERT(VARCHAR(MAX), ISNULL(mse.TELOSLOGENIE,'нормостеническое')) AS [PATIENTS_VITAL_TELO],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.TELOSLOGENIE, '') like '%нормо%' THEN '1' WHEN ISNULL(mse.TELOSLOGENIE, '') like '%астен%' THEN '2' WHEN ISNULL(mse.TELOSLOGENIE, '') like 'гипер%' THEN '3' ELSE '1' END) AS [PATIENTS_VITAL_TELO_CODE],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.SOST_ZDOROV, '') = '' THEN 'нет данных' ELSE REPLACE(REPLACE(ISNULL(mse.SOST_ZDOROV, ''), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_DIRECTION_SOSTOYANIE],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(convert(nvarchar(max),mse.SVED_O_OBSLED_INSTR), '') = '' AND ISNULL(convert(nvarchar(max),mse.SVED_O_OBSLED_LAB), '') = '' AND ISNULL(convert(nvarchar(max), mse.SVED_O_OBSLED_KONSULT), '') = '' THEN 'данные отсутствуют' ELSE 'Инструментальные обследования: ' + REPLACE(REPLACE(ISNULL(convert(nvarchar(max),mse.SVED_O_OBSLED_INSTR), ''), '>', ' больше '), '<', ' меньше ') + ' Лабораторные обследования: ' + REPLACE(REPLACE(ISNULL(convert(nvarchar(max),mse.SVED_O_OBSLED_LAB), ''), '>', ' больше '), '<', ' меньше ') + ' Консультации специалистов: ' + REPLACE(REPLACE(ISNULL(convert(nvarchar(max), mse.SVED_O_OBSLED_KONSULT), ''), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_DIRECTION_MEDICAL_EXAMINATIONS],
CONVERT(VARCHAR(MAX),ISNULL((select TOP 1 MKB10_CODE from (SELECT TOP 10
	DATA_DIAGNOSIS.MOTCONSU_ID MOTCONSU_ID, 
	DATA_DIAGNOSIS.VID_ZABOLEVANIQ VID_ZABOLEVANIQ, 
	CIM10.CODE MKB10_CODE, 
	CIM10.DESCRIPTION MKB10_NAME, 
	DATA_DIAGNOSIS.DIAGNOZ DS_VRACH, 
	DATA_DIAGNOSIS.DATA_NAHALA_ZABOLEVANIQ DATA_DIAGNOS
	FROM DATA_DIAGNOSIS DATA_DIAGNOSIS
	left join CIM10 CIM10 ON CIM10.CIM10_ID = DATA_DIAGNOSIS.SS_LKA_CIM10
	WHERE DATA_DIAGNOSIS.MOTCONSU_ID = @AF_CURRENT_MOTCONSU) d where VID_ZABOLEVANIQ = 0), '')) AS [PATIENTS_DIRECTION_DIAGNOSIS_MAIN_CODE],
REPLACE(REPLACE(CONVERT(VARCHAR(MAX),ISNULL((select TOP 1 DS_VRACH from (SELECT TOP 10
	DATA_DIAGNOSIS.MOTCONSU_ID MOTCONSU_ID, 
	DATA_DIAGNOSIS.VID_ZABOLEVANIQ VID_ZABOLEVANIQ, 
	CIM10.CODE MKB10_CODE, 
	CIM10.DESCRIPTION MKB10_NAME, 
	DATA_DIAGNOSIS.DIAGNOZ DS_VRACH, 
	DATA_DIAGNOSIS.DATA_NAHALA_ZABOLEVANIQ DATA_DIAGNOS
	FROM DATA_DIAGNOSIS DATA_DIAGNOSIS
	left join CIM10 CIM10 ON CIM10.CIM10_ID = DATA_DIAGNOSIS.SS_LKA_CIM10
	WHERE DATA_DIAGNOSIS.MOTCONSU_ID = @AF_CURRENT_MOTCONSU) d where VID_ZABOLEVANIQ = 0), '')), '>', ' больше '), '<', ' меньше ') AS [PATIENTS_DIRECTION_DIAGNOSIS_MAIN_DESCRIPTION],
CONVERT(VARCHAR(MAX),ISNULL((select TOP 1 MKB10_NAME from (SELECT TOP 10
	DATA_DIAGNOSIS.MOTCONSU_ID MOTCONSU_ID, 
	DATA_DIAGNOSIS.VID_ZABOLEVANIQ VID_ZABOLEVANIQ, 
	CIM10.CODE MKB10_CODE, 
	CIM10.DESCRIPTION MKB10_NAME, 
	DATA_DIAGNOSIS.DIAGNOZ DS_VRACH, 
	DATA_DIAGNOSIS.DATA_NAHALA_ZABOLEVANIQ DATA_DIAGNOS
	FROM DATA_DIAGNOSIS DATA_DIAGNOSIS
	left join CIM10 CIM10 ON CIM10.CIM10_ID = DATA_DIAGNOSIS.SS_LKA_CIM10
	WHERE DATA_DIAGNOSIS.MOTCONSU_ID = @AF_CURRENT_MOTCONSU) d where VID_ZABOLEVANIQ = 0), '') ) AS [PATIENTS_DIRECTION_DIAGNOSIS_MAIN_DESCRIPTION_MKB],
CONVERT(varchar(MAX), ISNULL((select TOP 1 DATA_DIAGNOS from (SELECT TOP 10
	DATA_DIAGNOSIS.MOTCONSU_ID MOTCONSU_ID, 
	DATA_DIAGNOSIS.VID_ZABOLEVANIQ VID_ZABOLEVANIQ, 
	CIM10.CODE MKB10_CODE, 
	CIM10.DESCRIPTION MKB10_NAME, 
	DATA_DIAGNOSIS.DIAGNOZ DS_VRACH, 
	DATA_DIAGNOSIS.DATA_NAHALA_ZABOLEVANIQ DATA_DIAGNOS
	FROM DATA_DIAGNOSIS DATA_DIAGNOSIS
	left join CIM10 CIM10 ON CIM10.CIM10_ID = DATA_DIAGNOSIS.SS_LKA_CIM10
	WHERE DATA_DIAGNOSIS.MOTCONSU_ID = @AF_CURRENT_MOTCONSU) d where VID_ZABOLEVANIQ = 0), ''), 112) AS [PATIENTS_DIRECTION_DIAGNOSIS_MAIN_DATE],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.KLINICH_PROGNOZ, '') = 0 THEN 'Клинический прогноз благоприятный' WHEN ISNULL(mse.KLINICH_PROGNOZ, '') = 1 THEN 'Клинический прогноз относительно благоприятный' WHEN ISNULL(mse.KLINICH_PROGNOZ, '') = 2 THEN 'Клинический прогноз сомнительный (неопределенный)' WHEN ISNULL(mse.KLINICH_PROGNOZ, '') = 3 THEN 'Клинический прогноз неблагоприятный' ELSE 'нет данных' END) AS [PATIENTS_DIRECTION_OBJECTIVE_CLINICAL_PROGNOSIS],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.REABILIT_POTENC, '') = 0 THEN 'Реабилитационный потенциал высокий' WHEN ISNULL(mse.REABILIT_POTENC, '') = 1 THEN 'Реабилитационный потенциал удовлетворительный' WHEN ISNULL(mse.REABILIT_POTENC, '') = 2 THEN 'Реабилитационный потенциал низкий' WHEN ISNULL(mse.REABILIT_POTENC, '') = 3 THEN 'Реабилитационный потенциал отсутствует' ELSE 'нет данных' END) AS [PATIENTS_DIRECTION_OBJECTIVE_REABILITATION_POTENCIAL],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.REABILIT_PROGNOZ, '') = 0 THEN 'Реабилитационный прогноз благоприятный' WHEN ISNULL(mse.REABILIT_PROGNOZ, '') = 1 THEN 'Реабилитационный прогноз относительно благоприятный' WHEN ISNULL(mse.REABILIT_PROGNOZ, '') = 2 THEN 'Реабилитационный прогноз сомнительный (неопределенный)' WHEN ISNULL(mse.REABILIT_PROGNOZ, '') = 3 THEN 'Реабилитационный прогноз неблагоприятный' ELSE 'нет данных' END) AS [PATIENTS_DIRECTION_OBJECTIVE_REABILITATION_PROGNOSIS],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.MEROPR_HIRURG, '') = '' AND ISNULL(mse.MEROPR_PROTEZ, '') = '' AND ISNULL(mse.SAN_KUR, '') = '' THEN 'нет данных' ELSE 'Рекомендуемые мероприятия по реконструктивной хирургии: ' + ISNULL(mse.MEROPR_HIRURG, 'нет данных') + ' Рекомендуемые мероприятия по протезированию и ортезированию: ' + ISNULL(mse.MEROPR_PROTEZ, 'нет данных') + ' Санаторно-курортное лечение: ' + ISNULL(mse.SAN_KUR, 'нет данных') END) AS [PATIENTS_DIRECTION_RECOMEND_CURE],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.MEROPR_HIRURG, '')='' THEN 'нет данных' ELSE REPLACE(REPLACE(ISNULL(mse.MEROPR_HIRURG, ''), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_DIRECTION_RECOMEND_HIR],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.MEROPR_PROTEZ, '')='' THEN 'нет данных' ELSE REPLACE(REPLACE(ISNULL(mse.MEROPR_PROTEZ, ''), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_DIRECTION_RECOMEND_PROTEZ],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.SAN_KUR, '')='' THEN 'нет данных' ELSE ISNULL(mse.SAN_KUR, '') END) AS [PATIENTS_DIRECTION_RECOMEND_SANKUR],
CONVERT(VARCHAR(MAX),CASE WHEN ISNULL(mse.MEROPR_REAB, '') = '' THEN 'нет данных' ELSE REPLACE(REPLACE(ISNULL(mse.MEROPR_REAB, ''), '>', ' больше '), '<', ' меньше ') END) AS [PATIENTS_DIRECTION_RECOMEND_ANOTHER]
--,mse.CREATE_DATE_TIME



FROM
  (SELECT
  DATA_W438_MSE_NAPRAV.KRN_CREATE_DATE KRN_CREATE_DATE,
  DATA_W438_MSE_NAPRAV.KRN_MODIFY_DATE KRN_MODIFY_DATE,
  (SELECT LABEL FROM FM_ORG WHERE FM_ORG_ID = 1)  lpu,
  (SELECT FM_ADR.ADR FROM FM_ADR WHERE FM_ADR.FM_ADR_ID = (SELECT    FM_ORG_ADR.FM_ADR_ID  FROM fm_org_adr  WHERE FM_ORG_ADR.FM_ORG_ID = 1))  adres_lpu,
  (SELECT FM_ORG.ORGN FROM FM_ORG WHERE FM_ORG_ID = 1) ogrn_mo,
  DATA_W438_MSE_NAPRAV.MOTCONSU_ID motconsu_id,
  DATA_W438_MSE_NAPRAV.NOMER_PROTOKOLA_VK NOMER_PROTOKOLA_VK,
  DATA_W438_MSE_NAPRAV.DATE_PROTOKOLA_VK DATE_PROTOKOLA_VK,
  DATA_W438_MSE_NAPRAV.NA_DOMU NA_DOMU,
  DATA_W438_MSE_NAPRAV.PALLIAT_MED_POM PALLIAT_MED_POM,
  DATA_W438_MSE_NAPRAV.DATE_CONSULTATION DATE_CONSULTATION,
  DATA_W438_MISSION_MSE.NAIMENOVANIE NAIMENOVANIE,
  DATA_W438_MSE_NAPRAV.MISSION MISSION,
  DATA_W438_MSE_NAPRAV.ANOTHER_MISSION ANOTHER_MISSION,
  PATIENTS.NOM NOM,
  PATIENTS.PRENOM PRENOM,
  PATIENTS.PATRONYME PATRONYME,
  PATIENTS.NE_LE NE_LE,
  (SELECT DATEDIFF(YEAR,(SELECT NE_LE FROM PATIENTS WHERE PATIENTS_ID = @AF_CURRENT_PATIENT), GETDATE())) Age,
  (LOWER(CASE WHEN PATIENTS.POL = 0 THEN 'МУЖСКОЙ' ELSE 'ЖЕНСКИЙ' END)) pol,
  DATA_W438_MSE_NAPRAV.GRAGDANSTVO,
  DATA_W438_MSE_NAPRAV.VOIN_OBYAZ,
  PATIENTS.DOM,
  PATIENTS.KORPUS,
  PATIENTS.STROENIE,
  PATIENTS.NASELENN_J_PUNKT,
  PATIENTS.KVARTIRA,
  PATIENTS.INDEKS,
  ADR_STREET.INDEKS AS INDEKS_STREET,
  PATIENTS.ULICA,
  PATIENTS.ULICA_MOSKVA,
  OMI_COUNTRY.NAME,
  ADR_OBLAST.NAME ADR_OBLAST_NAME,
  PATIENTS.RAJON,
  ADR_OBLAST.SOCR,
  PATIENTS.KOD_TERRITORII,
  PATIENTS.REG_TERRITORY,
  PATIENTS.REG_SETTLEMENT_TEXT,
  ADR_STREET_REG.INDEKS AS REG_INDEKS_STREET,
  PATIENTS.REG_STREET_TEXT,
  PATIENTS.REG_HOUSE,
  PATIENTS.REG_HOUSING,
  PATIENTS.REG_BUILDING,
  PATIENTS.REG_FLAT,
  DATA_W438_MSE_NAPRAV.BOMG,
  DATA_W438_MSE_NAPRAV.GRAZDANIN_NAHODITSYA,
  DATA_W438_MSE_NAPRAV.ADRESS_ORG,
  DATA_W438_MSE_NAPRAV.OGRN_ORG,
  PATIENTS.MOBIL_TELEFON,
  PATIENTS.E_MAIL,
  PATIENTS.SYS_SNILS,
  OMI_DOCTYPE.LABEL,
  PATIENTS.VID_DOKUMENTA,
  PATIENTS.SERIQ_DOKUMENTA,
  PATIENTS.PASPORT_N,
  PATIENTS.KOGDA_V_DAN,
  PATIENTS.KEM_V_DAN,
  PATIENTS.KOD_PODRAZDELENIYA,
  DATA_FOR_LEGAL_REPRESENT.FAMILIYA,
  DATA_FOR_LEGAL_REPRESENT.IMYA,
  DATA_FOR_LEGAL_REPRESENT.OTCHESTVO,
  DATA_FOR_LEGAL_REPRESENT.DOKUM_PREDSTAV_,
  DATA_FOR_LEGAL_REPRESENT.VYDAN_KEM_KOGDA,
  DATA_FOR_LEGAL_REPRESENT.NOMER_DOKUMENTA,
  DATA_FOR_LEGAL_REPRESENT.SERIYA_DOC_PODTV,
  DATA_FOR_LEGAL_REPRESENT.KOGDA_VIDAN_DOC_PODTV,
  OMI_DOCTYPE_1.LABEL OMI_DOCTYPE_LABEL,
  DATA_FOR_LEGAL_REPRESENT.PASPORT,
  DATA_FOR_LEGAL_REPRESENT.SERIQ_DOKUMENTA DATA_FOR_LEGAL_REPRESENT_SERIQ_,
  DATA_FOR_LEGAL_REPRESENT.KOGDA_V_DAN DATA_FOR_LEGAL_REPRESENT_KOGDA_,
  DATA_FOR_LEGAL_REPRESENT.KEM_VYDAN,
  DATA_FOR_LEGAL_REPRESENT.TELEFON,
  DATA_FOR_LEGAL_REPRESENT.E_MAIL DATA_FOR_LEGAL_REPRESENT_E_MAIL,
  DATA_FOR_LEGAL_REPRESENT.SNILS DATA_FOR_LEGAL_REPRESENT_SNILS,
  DATA_FOR_LEGAL_REPRESENT.NAME_FIRMA,
  DATA_FOR_LEGAL_REPRESENT.ADRES_FIRMA,
  DATA_FOR_LEGAL_REPRESENT.OGRN_FIRMA,
  DATA_W438_MSE_NAPRAV.PERV_POVTORN,
  DATA_W438_MSE_NAPRAV.INVALID,
  DATA_W438_MSE_NAPRAV.OKONCH_DEISTVIYA,
  DATA_W438_PRICHINA_INVALID.FORMULIROVKA_PRICHINY,
  DATA_W438_MSE_NAPRAV.PERIOD_INVALID,
  DATA_W438_MSE_NAPRAV.ANOTHER_PRICHINA,
  DATA_W438_MSE_NAPRAV.FORMULIROVKA_PRICHIN_INVALID,
  DATA_W438_MSE_NAPRAV.PRICHINA_INVALID,
  DATA_W438_MSE_NAPRAV.STEPEN_UTRATI,
  DATA_W438_MSE_NAPRAV.SROK_UTRATI,
  DATA_W438_MSE_NAPRAV.DATA_UTRATI,
    DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_1 POVTOR_STEP_UTRATI_PROC_1,
  DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_2 POVTOR_STEP_UTRATI_PROC_2,
  DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_3 POVTOR_STEP_UTRATI_PROC_3,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_1 POVTOR_SROK_UTRATI_1,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_2 POVTOR_SROK_UTRATI_2,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_3 POVTOR_SROK_UTRATI_3,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_1 POVTOR_DATA_UTRATI_1,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_2 POVTOR_DATA_UTRATI_2,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_3 POVTOR_DATA_UTRATI_3,
  DATA_W438_MSE_NAPRAV.UCHEBA,
  DATA_W438_MSE_NAPRAV.NAIMENOVAN_ADRES_OBR_ORG NAIMENOVAN_ADRES_OBR_ORG,
  DATA_W438_MSE_NAPRAV.KURS_KLASS,
  DATA_W438_MSE_NAPRAV.OBUCH_SPECIALNOST_PROFESSIYA,
  DATA_W438_MSE_NAPRAV.RABOTA,
  DATA_W438_MSE_NAPRAV.SVEDENIYA_RABOTA,
  DATA_W438_MSE_NAPRAV.PROFESSIYA,
  DATA_W438_MSE_NAPRAV.KVALIFIKACIYA,
  DATA_W438_MSE_NAPRAV.STAG_RABOTI,
  DATA_W438_MSE_NAPRAV.VIPOLNYAEMAYA_RABOTA,
  DATA_W438_MSE_NAPRAV.USLOVIYA_RABOTI,
  DATA_W438_MSE_NAPRAV.MESTO_RABOTI,
  DATA_W438_MSE_NAPRAV.ADRES_RABOTI,
  DATA_W438_MSE_NAPRAV.NABLUDAETSYA,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.ANAMNEZ_ZHIZNI) ANAMNEZ_ZHIZNI,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.ANAMNEZ_ZABOL) ANAMNEZ_ZABOL,
  DATA_W438_MSE_NAPRAV.NALICH_ELN,
  DATA_W438_MSE_NAPRAV.NOMER_ELN,
  DATA_W438_MSE_NAPRAV.NOMER_PROG,
  DATA_W438_MSE_NAPRAV.NOMER_PROTOKOLA_K_PROGR,
  DATA_W438_MSE_NAPRAV.DATA_MSE_K_PROGR,
  DATA_W438_MSE_NAPRAV.VOSTANOVLENIE,
  DATA_W438_MSE_NAPRAV.VOSTANOVLENIE_VIBOR,
  DATA_W438_MSE_NAPRAV.DOSTIGENIE,
  DATA_W438_MSE_NAPRAV.DOSTIGENIE_VIBOR,
  DATA_W438_MSE_NAPRAV.ROST,
  DATA_W438_MSE_NAPRAV.VES,
  DATA_W438_MSE_NAPRAV.INDEX_MT,
  DATA_W438_MSE_NAPRAV.TELOSLOGENIE,
  DATA_W438_MSE_NAPRAV.ML_FIZ_OTPRAV,
  DATA_W438_MSE_NAPRAV.TALIYA_BEDRA,
  DATA_W438_MSE_NAPRAV.VES_DO_3,
  DATA_W438_MSE_NAPRAV.FIZ_RAZV,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SOST_ZDOROV) SOST_ZDOROV,
  --CONVERT(NVARCHAR(200), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED) SVED_O_OBSLED,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSNOVN_D) OSNOVN_D,
  DATA_W438_MSE_NAPRAV.KOD_OSNOVN_D,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSLOGN_OSNOVN_D) OSLOGN_OSNOVN_D,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SOPUT_D) SOPUT_D,
  DATA_W438_MSE_NAPRAV.KOD_SOPUT,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSLOGN_SOPUT_D) OSLOGN_SOPUT_D,
  DATA_W438_MSE_NAPRAV.KLINICH_PROGNOZ,
  DATA_W438_MSE_NAPRAV.REABILIT_POTENC,
  DATA_W438_MSE_NAPRAV.REABILIT_PROGNOZ,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_REAB) MEROPR_REAB,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_HIRURG) MEROPR_HIRURG,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_PROTEZ) MEROPR_PROTEZ,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SAN_KUR) SAN_KUR,
  DATA_W438_MSE_NAPRAV.REZULTAT_REAB_TEXT,
  CIM10_1.CODE CIM10_CODE,
  ((MEDECINS.NOM + ' '  + MEDECINS.PRENOM)) praedsedatel_vk,
  ((MEDECINS_1.NOM + ' ' + MEDECINS_1.PRENOM)) CHLEN_VK1,
  ((MEDECINS_2.NOM + ' ' + MEDECINS_2.PRENOM)) CHLEN_VK2,
  ((MEDECINS_3.NOM + ' ' + MEDECINS_3.PRENOM)) CHLEN_VK3,
  ((MEDECINS_4.NOM + ' ' + MEDECINS_4.PRENOM)) CHLEN_VK4,
  (CASE WHEN (DATEDIFF(mm,(SELECT NE_LE FROM PATIENTS WHERE PATIENTS_ID = @AF_CURRENT_PATIENT), GETDATE())) <= 12 THEN DATEDIFF(mm, (SELECT NE_LE FROM PATIENTS WHERE PATIENTS_ID = @AF_CURRENT_PATIENT), GETDATE()) ELSE '' END) AGE_1,
  PATIENTS.KRN_GUID ,
  MOTCONSU.LEHAHIJ_VRAH MEDECINS_CREATOR_ID,
  MEDECINS_CREATOR.SNILS MEDECINS_CREATOR_SNILS,
  NSI_DOLZGNOST.CODE_NSI_DOLZGNOST CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST.DOLZGNOST_MED_PERSONALA DOLZGNOST_MED_PERSONALA,
  MEDECINS_CREATOR.NOM MEDECINS_CREATOR_NOM,
  MEDECINS_CREATOR.PRENOM MEDECINS_CREATOR_PRENOM,
  DATA_INS_POLICIES_OMI.NOMER_POLISA NOMER_POLISA,
  SMO_TFOMS.OMS_SMORG_ID OMS_SMORG_ID,
  SMO_TFOMS.SHORT_LABEL SMO_LABEL,
  MEDECINS_4.MEDECINS_ID PREDSEDATEL_VK_ID,
  MEDECINS_4.SNILS PREDSEDATEL_SNILS,
  NSI_DOLZGNOST_PREDSEDATEL_VK.CODE_NSI_DOLZGNOST PREDSEDATEL_VK_CODE_DOLZGNOST,
  NSI_DOLZGNOST_PREDSEDATEL_VK.DOLZGNOST_MED_PERSONALA PREDSEDATEL_VK_DOLZGNOST,
  MEDECINS_4.NOM PREDSEDATEL_NOM,
  MEDECINS_4.PRENOM PREDSEDATEL_PRENOM,
  MEDECINS.MEDECINS_ID CHLEN_VK1_ID,
  MEDECINS.SNILS CHLEN_VK1_SNILS,
  NSI_DOLZGNOST_CHLEN_VK1.CODE_NSI_DOLZGNOST CHLEN_VK1_CODE_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK1.DOLZGNOST_MED_PERSONALA CHLEN_VK1_DOLZGNOST,
  MEDECINS.NOM CHLEN_VK1_NOM,
  MEDECINS.PRENOM CHLEN_VK1_PRENOM,
  MEDECINS_1.MEDECINS_ID CHLEN_VK2_ID,
  MEDECINS_1.SNILS CHLEN_VK2_SNILS,
  NSI_DOLZGNOST_CHLEN_VK2.CODE_NSI_DOLZGNOST CHLEN_VK2_CODE_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK2.DOLZGNOST_MED_PERSONALA CHLEN_VK2_DOLZGNOST,
  MEDECINS_1.NOM CHLEN_VK2_NOM,
  MEDECINS_1.PRENOM CHLEN_VK2_PRENOM,
  MEDECINS_2.MEDECINS_ID CHLEN_VK3_ID,
  MEDECINS_2.SNILS CHLEN_VK3_SNILS,
  NSI_DOLZGNOST_CHLEN_VK3.CODE_NSI_DOLZGNOST CHLEN_VK3_CODE_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK3.DOLZGNOST_MED_PERSONALA CHLEN_VK3_DOLZGNOST,
  MEDECINS_2.NOM CHLEN_VK3_NOM,
  MEDECINS_2.PRENOM CHLEN_VK3_PRENOM,
  MEDECINS_3.MEDECINS_ID CHLEN_VK4_ID,
  MEDECINS_3.SNILS CHLEN_VK4_SNILS,
  NSI_DOLZGNOST_CHLEN_VK4.CODE_NSI_DOLZGNOST CHLEN_VK4_CODE_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK4.DOLZGNOST_MED_PERSONALA CHLEN_VK4_DOLZGNOST,
  MEDECINS_3.NOM CHLEN_VK4_NOM,
  MEDECINS_3.PRENOM CHLEN_VK4_PRENOM,
  DATA_W438_MSE_NAPRAV.TALIYA,
  DATA_W438_MSE_NAPRAV.BEDRA,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_LAB) SVED_O_OBSLED_LAB,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_INSTR) SVED_O_OBSLED_INSTR,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_KONSULT) SVED_O_OBSLED_KONSULT
--  ,convert(DATE,  motconsu.CREATE_DATE_TIME) CREATE_DATE_TIME
  
FROM DATA_W438_MSE_NAPRAV DATA_W438_MSE_NAPRAV WITH (NOLOCK)
LEFT OUTER JOIN DATA_W438_MISSION_MSE DATA_W438_MISSION_MSE WITH (NOLOCK)
  ON DATA_W438_MISSION_MSE.DATA_W438_MISSION_MSE_ID = DATA_W438_MSE_NAPRAV.MISSION
LEFT OUTER JOIN DATA_W438_PRICHINA_INVALID DATA_W438_PRICHINA_INVALID WITH (NOLOCK)
  ON DATA_W438_PRICHINA_INVALID.DATA_W438_PRICHINA_INVALID_ID = DATA_W438_MSE_NAPRAV.PRICHINA_INVALID
LEFT OUTER JOIN PATIENTS PATIENTS WITH (NOLOCK)
  ON PATIENTS.PATIENTS_ID = DATA_W438_MSE_NAPRAV.PATIENTS_ID
LEFT OUTER JOIN MOTCONSU MOTCONSU WITH (NOLOCK)
  ON PATIENTS.PATIENTS_ID = MOTCONSU.PATIENTS_ID AND MOTCONSU.MOTCONSU_ID = DATA_W438_MSE_NAPRAV.SLUCHAI_ZABOL
LEFT OUTER JOIN FM_ORG FM_ORG WITH (NOLOCK)
  ON FM_ORG.FM_ORG_ID = MOTCONSU.LPU
LEFT OUTER JOIN OMI_COUNTRY OMI_COUNTRY WITH (NOLOCK)
  ON OMI_COUNTRY.OMS_COUNTRY_ID = PATIENTS.STRANA1
LEFT OUTER JOIN ADR_OBLAST ADR_OBLAST WITH (NOLOCK)
  ON ADR_OBLAST.ADR_OBLAST_ID = PATIENTS.KOD_TERRITORII
LEFT OUTER JOIN DATA_FOR_LEGAL_REPRESENT DATA_FOR_LEGAL_REPRESENT WITH (NOLOCK)
  ON PATIENTS.PATIENTS_ID = DATA_FOR_LEGAL_REPRESENT.PATIENTS_ID
LEFT OUTER JOIN OMI_DOCTYPE OMI_DOCTYPE_1 WITH (NOLOCK)
  ON OMI_DOCTYPE_1.OMS_DOCTYPE_ID = DATA_FOR_LEGAL_REPRESENT.VID_DOKUMENTA
LEFT OUTER JOIN OMI_DOCTYPE OMI_DOCTYPE WITH (NOLOCK)
  ON OMI_DOCTYPE.OMS_DOCTYPE_ID = PATIENTS.VID_DOKUMENTA
LEFT OUTER JOIN CIM10 CIM10_1 WITH (NOLOCK)
  ON CIM10_1.CIM10_ID = DATA_W438_MSE_NAPRAV.KOD_OSNOVN_D
LEFT OUTER JOIN MEDECINS MEDECINS WITH (NOLOCK)
  ON MEDECINS.MEDECINS_ID = DATA_W438_MSE_NAPRAV.CHLEN_VK1
LEFT OUTER JOIN MEDECINS MEDECINS_1 WITH (NOLOCK)
  ON MEDECINS_1.MEDECINS_ID = DATA_W438_MSE_NAPRAV.CHLEN_VK2
LEFT OUTER JOIN MEDECINS MEDECINS_2 WITH (NOLOCK)
  ON MEDECINS_2.MEDECINS_ID = DATA_W438_MSE_NAPRAV.CHLEN_VK3
LEFT OUTER JOIN MEDECINS MEDECINS_3 WITH (NOLOCK)
  ON MEDECINS_3.MEDECINS_ID = DATA_W438_MSE_NAPRAV.CHLEN_VK4
LEFT OUTER JOIN MEDECINS MEDECINS_4 WITH (NOLOCK)
  ON MEDECINS_4.MEDECINS_ID = DATA_W438_MSE_NAPRAV.Predsedatel_VK
LEFT OUTER JOIN ADR_STREET ADR_STREET WITH (NOLOCK)
  ON ADR_STREET.ADR_STREET_ID = PATIENTS.ULICA_MOSKVA
LEFT OUTER JOIN ADR_STREET ADR_STREET_REG WITH (NOLOCK)
  ON ADR_STREET_REG.ADR_STREET_ID = PATIENTS.REG_STREET
LEFT OUTER JOIN MEDECINS MEDECINS_CREATOR WITH (NOLOCK)
  ON MEDECINS_CREATOR.MEDECINS_ID = MOTCONSU.LEHAHIJ_VRAH
LEFT OUTER JOIN SPECIALISATION SPECIALISATION WITH (NOLOCK)
  ON SPECIALISATION.SPECIALISATION_ID = MEDECINS_CREATOR.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST WITH (NOLOCK)
  ON SPECIALISATION.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST
LEFT OUTER JOIN DATA_INS_POLICIES_OMI DATA_INS_POLICIES_OMI WITH (NOLOCK)
  ON DATA_INS_POLICIES_OMI.PATIENTS_ID = PATIENTS.PATIENTS_ID
LEFT OUTER JOIN FM_ORG SMO_TFOMS WITH (NOLOCK)
  ON SMO_TFOMS.FM_ORG_ID = DATA_INS_POLICIES_OMI.SMO
LEFT OUTER JOIN SPECIALISATION SPECIALISATION_PREDSEDATEL_VK WITH (NOLOCK)
  ON SPECIALISATION_PREDSEDATEL_VK.SPECIALISATION_ID = MEDECINS_4.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST_PREDSEDATEL_VK WITH (NOLOCK)
  ON NSI_DOLZGNOST_PREDSEDATEL_VK.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST
LEFT OUTER JOIN SPECIALISATION SPECIALISATION_CHLEN_VK1 WITH (NOLOCK)
  ON SPECIALISATION_CHLEN_VK1.SPECIALISATION_ID = MEDECINS.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST_CHLEN_VK1 WITH (NOLOCK)
  ON NSI_DOLZGNOST_CHLEN_VK1.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST
LEFT OUTER JOIN SPECIALISATION SPECIALISATION_CHLEN_VK2 WITH (NOLOCK)
  ON SPECIALISATION_CHLEN_VK2.SPECIALISATION_ID = MEDECINS_1.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST_CHLEN_VK2 WITH (NOLOCK)
  ON NSI_DOLZGNOST_CHLEN_VK2.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST
LEFT OUTER JOIN SPECIALISATION SPECIALISATION_CHLEN_VK3 WITH (NOLOCK)
  ON SPECIALISATION_CHLEN_VK3.SPECIALISATION_ID = MEDECINS_2.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST_CHLEN_VK3 WITH (NOLOCK)
  ON NSI_DOLZGNOST_CHLEN_VK3.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST
LEFT OUTER JOIN SPECIALISATION SPECIALISATION_CHLEN_VK4 WITH (NOLOCK)
  ON SPECIALISATION_CHLEN_VK4.SPECIALISATION_ID = MEDECINS_3.SPECIALISATION_ID
LEFT OUTER JOIN NSI_DOLZGNOST NSI_DOLZGNOST_CHLEN_VK4 WITH (NOLOCK)
  ON NSI_DOLZGNOST_CHLEN_VK4.CODE_NSI_DOLZGNOST = NSI_DOLZGNOST.CODE_NSI_DOLZGNOST

  WHERE 
  DATA_W438_MSE_NAPRAV.PATIENTS_ID = @AF_CURRENT_PATIENT AND 
  DATA_W438_MSE_NAPRAV.MOTCONSU_ID = @AF_CURRENT_MOTCONSU

  GROUP BY DATA_W438_MSE_NAPRAV.DATE_CONSULTATION,
  DATA_W438_MSE_NAPRAV.NOMER_PROTOKOLA_VK,
  DATA_W438_MSE_NAPRAV.DATE_PROTOKOLA_VK,
  DATA_W438_MSE_NAPRAV.NA_DOMU,
  DATA_W438_MSE_NAPRAV.PALLIAT_MED_POM,
  DATA_W438_MSE_NAPRAV.DATE_CONSULTATION,
  DATA_W438_MISSION_MSE.NAIMENOVANIE,
  DATA_W438_MSE_NAPRAV.ANOTHER_MISSION,
  PATIENTS.NOM,
  PATIENTS.PRENOM,
  PATIENTS.PATRONYME,
  PATIENTS.NE_LE,
  PATIENTS.POL,
  DATA_W438_MSE_NAPRAV.GRAGDANSTVO,
  DATA_W438_MSE_NAPRAV.VOIN_OBYAZ,
  PATIENTS.DOM,
  PATIENTS.KORPUS,
  PATIENTS.STROENIE,
  PATIENTS.NASELENN_J_PUNKT,
  PATIENTS.KVARTIRA,
  PATIENTS.INDEKS,
  PATIENTS.ULICA,
  PATIENTS.ULICA_MOSKVA,
  OMI_COUNTRY.NAME,
  ADR_OBLAST.NAME,
  PATIENTS.RAJON,
  ADR_OBLAST.SOCR,
  DATA_W438_MSE_NAPRAV.BOMG,
  DATA_W438_MSE_NAPRAV.GRAZDANIN_NAHODITSYA,
  DATA_W438_MSE_NAPRAV.ADRESS_ORG,
  DATA_W438_MSE_NAPRAV.OGRN_ORG,
  PATIENTS.MOBIL_TELEFON,
  PATIENTS.E_MAIL,
  PATIENTS.SYS_SNILS,
  OMI_DOCTYPE.LABEL,
  PATIENTS.SERIQ_DOKUMENTA,
  PATIENTS.PASPORT_N,
  PATIENTS.KOGDA_V_DAN,
  PATIENTS.KEM_V_DAN,
  DATA_FOR_LEGAL_REPRESENT.FAMILIYA,
  DATA_FOR_LEGAL_REPRESENT.IMYA,
  DATA_FOR_LEGAL_REPRESENT.OTCHESTVO,
  DATA_FOR_LEGAL_REPRESENT.DOKUM_PREDSTAV_,
  DATA_FOR_LEGAL_REPRESENT.VYDAN_KEM_KOGDA,
  DATA_FOR_LEGAL_REPRESENT.NOMER_DOKUMENTA,
  DATA_FOR_LEGAL_REPRESENT.SERIYA_DOC_PODTV,
  DATA_FOR_LEGAL_REPRESENT.KOGDA_VIDAN_DOC_PODTV,
  OMI_DOCTYPE_1.LABEL,
  DATA_FOR_LEGAL_REPRESENT.PASPORT,
  DATA_FOR_LEGAL_REPRESENT.SERIQ_DOKUMENTA,
  DATA_FOR_LEGAL_REPRESENT.KOGDA_V_DAN,
  DATA_FOR_LEGAL_REPRESENT.KEM_VYDAN,
  DATA_FOR_LEGAL_REPRESENT.TELEFON,
  DATA_FOR_LEGAL_REPRESENT.E_MAIL,
  DATA_FOR_LEGAL_REPRESENT.SNILS,
  DATA_FOR_LEGAL_REPRESENT.NAME_FIRMA,
  DATA_FOR_LEGAL_REPRESENT.ADRES_FIRMA,
  DATA_FOR_LEGAL_REPRESENT.OGRN_FIRMA,
  DATA_W438_MSE_NAPRAV.PERV_POVTORN,
  DATA_W438_MSE_NAPRAV.INVALID,
  DATA_W438_MSE_NAPRAV.OKONCH_DEISTVIYA,
  DATA_W438_PRICHINA_INVALID.FORMULIROVKA_PRICHINY,
  DATA_W438_MSE_NAPRAV.PERIOD_INVALID,
  DATA_W438_MSE_NAPRAV.ANOTHER_PRICHINA,
  DATA_W438_MSE_NAPRAV.FORMULIROVKA_PRICHIN_INVALID,
  DATA_W438_MSE_NAPRAV.PRICHINA_INVALID,
  DATA_W438_MSE_NAPRAV.STEPEN_UTRATI,
  DATA_W438_MSE_NAPRAV.SROK_UTRATI,
  DATA_W438_MSE_NAPRAV.DATA_UTRATI,
  DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_1,
  DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_2,
  DATA_W438_MSE_NAPRAV.POVTOR_STEP_UTRATI_PROC_3,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_1,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_2,
  DATA_W438_MSE_NAPRAV.POVTOR_SROK_UTRATI_3,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_1,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_2,
  DATA_W438_MSE_NAPRAV.POVTOR_DATA_UTRATI_3,
  DATA_W438_MSE_NAPRAV.UCHEBA,
  DATA_W438_MSE_NAPRAV.NAIMENOVAN_ADRES_OBR_ORG,
  DATA_W438_MSE_NAPRAV.KURS_KLASS,
  DATA_W438_MSE_NAPRAV.OBUCH_SPECIALNOST_PROFESSIYA,
  DATA_W438_MSE_NAPRAV.RABOTA,
  DATA_W438_MSE_NAPRAV.SVEDENIYA_RABOTA,
  DATA_W438_MSE_NAPRAV.PROFESSIYA,
  DATA_W438_MSE_NAPRAV.KVALIFIKACIYA,
  DATA_W438_MSE_NAPRAV.STAG_RABOTI,
  DATA_W438_MSE_NAPRAV.VIPOLNYAEMAYA_RABOTA,
  DATA_W438_MSE_NAPRAV.USLOVIYA_RABOTI,
  DATA_W438_MSE_NAPRAV.MESTO_RABOTI,
  DATA_W438_MSE_NAPRAV.ADRES_RABOTI,
  DATA_W438_MSE_NAPRAV.NABLUDAETSYA,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.ANAMNEZ_ZHIZNI),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.ANAMNEZ_ZABOL),
  DATA_W438_MSE_NAPRAV.NALICH_ELN,
  DATA_W438_MSE_NAPRAV.NOMER_ELN,
  DATA_W438_MSE_NAPRAV.NOMER_PROG,
  DATA_W438_MSE_NAPRAV.NOMER_PROTOKOLA_K_PROGR,
  DATA_W438_MSE_NAPRAV.DATA_MSE_K_PROGR,
  DATA_W438_MSE_NAPRAV.VOSTANOVLENIE,
  DATA_W438_MSE_NAPRAV.VOSTANOVLENIE_VIBOR,
  DATA_W438_MSE_NAPRAV.DOSTIGENIE,
  DATA_W438_MSE_NAPRAV.DOSTIGENIE_VIBOR,
  DATA_W438_MSE_NAPRAV.ROST,
  DATA_W438_MSE_NAPRAV.VES,
  DATA_W438_MSE_NAPRAV.INDEX_MT,
  DATA_W438_MSE_NAPRAV.TELOSLOGENIE,
  DATA_W438_MSE_NAPRAV.ML_FIZ_OTPRAV,
  DATA_W438_MSE_NAPRAV.TALIYA_BEDRA,
  DATA_W438_MSE_NAPRAV.VES_DO_3,
  DATA_W438_MSE_NAPRAV.FIZ_RAZV,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SOST_ZDOROV),
  --CONVERT(NVARCHAR(200), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSNOVN_D),
  DATA_W438_MSE_NAPRAV.KOD_OSNOVN_D,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSLOGN_OSNOVN_D),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SOPUT_D),
  DATA_W438_MSE_NAPRAV.KOD_SOPUT,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.OSLOGN_SOPUT_D),
  DATA_W438_MSE_NAPRAV.KLINICH_PROGNOZ,
  DATA_W438_MSE_NAPRAV.REABILIT_POTENC,
  DATA_W438_MSE_NAPRAV.REABILIT_PROGNOZ,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_REAB),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_HIRURG),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.MEROPR_PROTEZ),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SAN_KUR),
  DATA_W438_MSE_NAPRAV.REZULTAT_REAB_TEXT,
  CIM10_1.CODE,
  MEDECINS.NOM,
  MEDECINS.PRENOM,
  MEDECINS_1.NOM,
  MEDECINS_1.PRENOM,
  MEDECINS_2.NOM,
  MEDECINS_2.PRENOM,
  MEDECINS_3.NOM,
  MEDECINS_3.PRENOM,
  MEDECINS_4.NOM,
  MEDECINS_4.PRENOM,
  PATIENTS.KRN_GUID,
  DATA_W438_MSE_NAPRAV.MOTCONSU_ID,
  DATA_W438_MSE_NAPRAV.KRN_CREATE_DATE,
  PATIENTS.VID_DOKUMENTA,
  PATIENTS.KOD_PODRAZDELENIYA,
  PATIENTS.REG_TERRITORY,
  PATIENTS.KOD_TERRITORII,
  ADR_STREET.INDEKS,
  PATIENTS.REG_SETTLEMENT_TEXT,
  ADR_STREET_REG.INDEKS,
  PATIENTS.REG_STREET_TEXT,
  PATIENTS.REG_HOUSE,
  PATIENTS.REG_HOUSING,
  PATIENTS.REG_BUILDING,
  PATIENTS.REG_FLAT,
  DATA_W438_MSE_NAPRAV.KRN_MODIFY_DATE,
  MOTCONSU.LEHAHIJ_VRAH,
  MEDECINS_CREATOR.SNILS,
  NSI_DOLZGNOST.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST.DOLZGNOST_MED_PERSONALA,
  MEDECINS_CREATOR.NOM,
  MEDECINS_CREATOR.PRENOM,
  DATA_INS_POLICIES_OMI.NOMER_POLISA,
  SMO_TFOMS.OMS_SMORG_ID,
  SMO_TFOMS.SHORT_LABEL,
  MEDECINS_4.MEDECINS_ID,
  MEDECINS_4.SNILS,
  NSI_DOLZGNOST_PREDSEDATEL_VK.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST_PREDSEDATEL_VK.DOLZGNOST_MED_PERSONALA,
  MEDECINS_4.NOM,
  MEDECINS_4.PRENOM,
  MEDECINS.MEDECINS_ID,
  MEDECINS.SNILS,
  NSI_DOLZGNOST_CHLEN_VK1.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK1.DOLZGNOST_MED_PERSONALA,
  MEDECINS.NOM,
  MEDECINS.PRENOM,
  MEDECINS_1.MEDECINS_ID,
  MEDECINS_1.SNILS,
  NSI_DOLZGNOST_CHLEN_VK2.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK2.DOLZGNOST_MED_PERSONALA,
  MEDECINS_1.NOM,
  MEDECINS_1.PRENOM,
  MEDECINS_2.MEDECINS_ID,
  MEDECINS_2.SNILS,
  NSI_DOLZGNOST_CHLEN_VK3.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK3.DOLZGNOST_MED_PERSONALA,
  MEDECINS_2.NOM,
  MEDECINS_2.PRENOM,
  MEDECINS_3.MEDECINS_ID,
  MEDECINS_3.SNILS,
  NSI_DOLZGNOST_CHLEN_VK4.CODE_NSI_DOLZGNOST,
  NSI_DOLZGNOST_CHLEN_VK4.DOLZGNOST_MED_PERSONALA,
  MEDECINS_3.NOM,
  MEDECINS_3.PRENOM,
  DATA_W438_MSE_NAPRAV.MISSION,
  DATA_W438_MSE_NAPRAV.TALIYA,
  DATA_W438_MSE_NAPRAV.BEDRA,
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_LAB),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_INSTR),
  CONVERT(NVARCHAR(4000), DATA_W438_MSE_NAPRAV.SVED_O_OBSLED_KONSULT)
--  ,convert(DATE,  motconsu.CREATE_DATE_TIME)
  

  ) mse
	

END









GO


