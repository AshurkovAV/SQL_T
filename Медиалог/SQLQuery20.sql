  declare @curr_date datetime, @period DATETIME = '20180401', @period_end datetime, @max int, @CURR_ORG int, @OMI_INVOICES_ID int,
  @PATIENTS_ID int, @OMI_INVOICES_PAT_ID int, @MOTCONSU_EV_ID int, @OMI_INVOICES_EV_ID int, @OMI_INVOICES_SERV_ID int,
  @FM_BILLDET_ID int, @CP_PLAN_1_ID int, @CP_PLAN_2_ID int, @BEDPROF int, @FM_CLINK_PATIENTS_ID int, @TFOMS_ID int, @PLAT_ID int,
  @newid int, @sql varchar(max), @curr_okato varchar(5), @IDSERV int;
  
  begin try
  	if exists(select * from tempdb.dbo.sysobjects o where o.xtype in ('U') and o.id = object_id(N'tempdb..#temp_oms'))
  		drop table #temp_oms
  end try
  begin catch
  	print 'not exists'
  end catch
  create table #temp_oms
  	(ID int, PATIENTS_ID int, PDT int, W int, DR datetime, OMI_POLICY_TYPES_ID int, SPOLIS varchar(10), NPOLIS varchar(20),
  	FAM varchar(40), IM varchar(40), OT varchar(40), MOTCONSU_EV_ID int, PR_NOV bit, ED_TREATMENT_FORM_ID int, ED_MED_PROVISION_CONDITIONS_ID int, BEGDATE datetime, ENDDATE datetime,
  	PLAT int, LPUBASE int, ID_STAT int, POLIS_SMO_ID int, SMO_OK varchar(5), NOVOR varchar(9), CURR_FILIAL_ID int, DIR_FILIAL_ID int, EXTR int, EV_MEDDEP_ID int, EV_FM_DEP_ID int, EV_FM_DEP_PROF_ID int,
  	EV_OMS_PROFILE_ID int, EV_DET bit, NHISTORY varchar(50), ED_TREATMENT_RESULT_ID int, ED_OUTCOMES_ID int, SPECIALISATION_ID int, MEDECINS_ID int, OS_SLUCH_2 bit, MR varchar(100),
  	OMS_DOCTYPE_ID int, DOCSER varchar(10), DOCNUM varchar(20), SNILS varchar(14), OKATOG varchar(12), OKATOP varchar(12), FM_BILLDET_ID int,
  	FM_INVOICE_ID int, FM_SERV_ID int, SINGPAY int, DATEUSL datetime, ED_TREATMENT_TYPES_ID int, ED_OPER_TYPE_ID int, DS_DENT int, MEDDEP_ID int, FM_DEP_ID int, FM_DEP_PROF_ID int,
  	OMS_PROFILE_ID int, MEDECINS_SERV_ID int, SPECIALISATION_SERV_ID int, DET bit, KOL_USL numeric(6, 2), ED_OMI_METHODS_PAYMENT_ID int, ED_COL numeric(5, 2),
  	TARIF numeric(15, 2), SUMV numeric(15, 2),
  	FAM_P varchar(40), IM_P varchar(40), OT_P varchar(40), W_P int, DR_P datetime,
  	FM_CLINK_PATIENTS_ID int, ED_OMI_METHODS_PAYMENT_EV_ID int, DENT_TOOTH_ID int, VNOV_D int, OS_SLUCH_1 bit, ED_AIDINGS_FORMS_ID int, MOTCONSU_NEWBORN_ID int,
  	ED_MEDEXAM_TYPES_ID int, ED_DISP_RESULTS_ID int, VMP_KIND_ID int, ED_VMP_METHODS_ID int, OMS_SOCSTATUS_ID int)
  CREATE UNIQUE NONCLUSTERED INDEX [idxID] ON #temp_oms (ID)
  CREATE NONCLUSTERED INDEX [idxPATIENTS_ID] ON #temp_oms (PATIENTS_ID)
  CREATE NONCLUSTERED INDEX [idxMOTCONSU_EV_ID] ON #temp_oms (MOTCONSU_EV_ID)
  CREATE NONCLUSTERED INDEX [idxBEGDATE] ON #temp_oms (BEGDATE)
  CREATE NONCLUSTERED INDEX [idxENDDATE] ON #temp_oms (ENDDATE)
  CREATE NONCLUSTERED INDEX [idxFM_BILLDET_ID] ON #temp_oms (FM_BILLDET_ID)
  CREATE NONCLUSTERED INDEX [idxFM_SERV_ID] ON #temp_oms (FM_SERV_ID)
  CREATE NONCLUSTERED INDEX [idxDATEUSL] ON #temp_oms (DATEUSL)
  CREATE NONCLUSTERED INDEX [idxFM_CLINK_PATIENTS_ID] ON #temp_oms (FM_CLINK_PATIENTS_ID)
  
  select PATIENTS.NOM, *
  	from FM_BILLDET -- таблица оплат по данному талону
  	LEFT JOIN MEDECINS MEDECINS_SERV on FM_BILLDET.MEDECINS_ID = MEDECINS_SERV.MEDECINS_ID
  	JOIN FM_BILL on FM_BILL.FM_BILL_ID = FM_BILLDET.FM_BILL_ID -- это созданный талон на оказание медпомощи
  	JOIN FM_SERV on FM_SERV.FM_SERV_ID = FM_BILLDET.FM_SERV_ID
  	JOIN MOTCONSU on FM_BILL.MOTCONSU_ID = MOTCONSU.MOTCONSU_ID
  	JOIN MOTCONSU MOTCONSU_EV on MOTCONSU_EV.MOTCONSU_ID = FM_BILL.MOTCONSU_EV_ID
  	JOIN DATA_AMBULAT_PATIENT_COUPON on DATA_AMBULAT_PATIENT_COUPON.MOTCONSU_ID = MOTCONSU_EV.MOTCONSU_ID
  	JOIN PATIENTS on PATIENTS.PATIENTS_ID = MOTCONSU.PATIENTS_ID
  	--left join FM_CLINK_PATIENTS on FM_CLINK_PATIENTS.FM_CLINK_PATIENTS_ID = FM_BILLDET.FM_CLINK_PATIENTS_ID
  	--left join FM_CLINK on FM_CLINK.FM_CLINK_ID = FM_CLINK_PATIENTS.FM_CLINK_ID
  	--left join FM_CONTR on FM_CONTR.FM_CONTR_ID = FM_CLINK.FM_CONTR_ID
  	--left join FM_ORG SMO on SMO.FM_ORG_ID = FM_CONTR.FM_ORG1_ID
  	--join FM_ORG CURR_FILIAL on CURR_FILIAL.FM_ORG_ID = @CURR_ORG
  	--left join DATA_FOR_LEGAL_REPRESENT on DATA_FOR_LEGAL_REPRESENT.PATIENTS_ID = PATIENTS.PATIENTS_ID and isnull(DATA_FOR_LEGAL_REPRESENT.STATUS, 0) != 0
  	--	and isnull(DATA_FOR_LEGAL_REPRESENT.IS_OMS, 0) = 1
  	--left join OMI_TERR_CODES cp_smo_terr on cp_smo_terr.OMS_KOD_TER_ID = SMO.OMS_KOD_TER_ID
  	--left join MEDDEP on MEDDEP.MEDDEP_ID = isnull(DATA_AMBULAT_PATIENT_COUPON.VRACH_OTDELENIE, MOTCONSU_EV.MEDDEP_ID)
  	--join MEDECINS on MEDECINS.MEDECINS_ID = ISNULL(MEDDEP.MEDECINS_ID, MOTCONSU_EV.MEDECINS_ID)
  	--left join FM_DEP on FM_DEP.FM_DEP_ID = isnull(MEDDEP.FM_DEP_ID, MOTCONSU_EV.FM_DEP_ID)
  	--left join SPECIALISATION on SPECIALISATION.SPECIALISATION_ID = isnull(MEDDEP.SPECIALISATION_ID, MEDECINS.SPECIALISATION_ID)
  	--left join MEDDEP MEDDEP_SERV on MEDDEP_SERV.MEDDEP_ID = FM_BILL.MEDDEP_ID
  	--left join FM_DEP FM_DEP_SERV on FM_DEP_SERV.FM_DEP_ID = isnull(MEDDEP_SERV.FM_DEP_ID, MOTCONSU.FM_DEP_ID)
  	--left join FM_DEP_PROF FM_DEP_PROF_SERV on FM_DEP_PROF_SERV.FM_DEP_PROF_ID = isnull(MEDDEP_SERV.FM_DEP_PROF_ID, FM_DEP_SERV.FM_DEP_PROF_ID)
  	--left join SPECIALISATION SPECIALISATION_SERV on SPECIALISATION_SERV.SPECIALISATION_ID = MEDECINS_SERV.SPECIALISATION_ID
  	--left join ED_TREATMENT_TYPES skind on skind.ED_TREATMENT_TYPES_ID = FM_SERV.ED_TREATMENT_TYPES_ID
  	--left join OMI_INVOICES_SERV existed_serv on existed_serv.FM_BILLDET_ID = FM_BILLDET.FM_BILLDET_ID
  
  	WHERE
  		ISNULL(FM_BILLDET.CANCEL, 0) = 0 AND ISNULL(FM_BILLDET.FREE_PAY, 0) = 0 AND FM_BILLDET.DONE = 1 AND 
  		ISNULL(FM_BILLDET.CANCEL, 0) = 0 AND ISNULL(FM_BILLDET.BLOCKED, 0) != 1
  		
  		
  		AND MOTCONSU_EV.EV_DATE_CLOSE IS NOT NULL AND MOTCONSU_EV.EV_DATE_CLOSE < dateadd(month, 1, @period)
  		OR (isnull(DATA_AMBULAT_PATIENT_COUPON.EV_PAYMENT_CLOSE, 0) = 1 AND FM_BILL.BILL_DATE < DATEADD(month, 1, @period))
  		AND PATIENTS.NOM = '“ест'
  		
  		
  		
  		--and (MOTCONSU_EV.EV_CLOSE = 1 or isnull(DATA_AMBULAT_PATIENT_COUPON.EV_PAYMENT_CLOSE, 0) = 1)
 		--AND existed_serv.OMI_INVOICES_SERV_ID is NULL		
 		--AND DATA_AMBULAT_PATIENT_COUPON.DATE_CONSULTATION is not null
 		--AND ((isnull(DATA_AMBULAT_PATIENT_COUPON.EV_PAYMENT_CLOSE, 0) = 0 
 		--and MOTCONSU_EV.EV_DATE_CLOSE is not null AND MOTCONSU_EV.EV_DATE_CLOSE < dateadd(month, 1, @period))
 		--	or (isnull(DATA_AMBULAT_PATIENT_COUPON.EV_PAYMENT_CLOSE, 0) = 1 and FM_BILL.BILL_DATE < DATEADD(month, 1, @period)))
 		--AND isnull(FM_CONTR.IS_OMS, 0) = 1 AND SMO.CODE_OMS is not null
 	
